import { SummaryService } from './summary.service';

describe('SummaryService', () => {
  let summaryService: SummaryService;
  let vm: { getCurrentMonthAndOrganizationSelected: any; };
  let updatedMonth: string;
  let noticationService: { confirmSave: any; };
  let save: jasmine.Spy<jasmine.Func>;
  let updateCurrentMonthAndOrganizationSelection: jasmine.Spy<jasmine.Func>;
  let updateUserSelections: jasmine.Spy<jasmine.Func>;

  beforeEach(() => {
    vm = {
      getCurrentMonthAndOrganizationSelected: jasmine.createSpy('getCurrentMonthAndOrganizationSelected'),
    };
    updatedMonth = 'September';
    noticationService = {
      confirmSave: jasmine.createSpy('confirmSave').and.returnValue(Promise.resolve()),
    };
    save = jasmine.createSpy('save').and.returnValue(Promise.resolve());
    updateCurrentMonthAndOrganizationSelection = jasmine.createSpy('updateCurrentMonthAndOrganizationSelection');
    updateUserSelections = jasmine.createSpy('updateUserSelections');

    summaryService = new SummaryService();
  });

  afterEach(() => {
  });

  it('should call updateUserSelections when there are no modifications and current month is equal to the already selected month', () => {
    summaryService.month = 'Septmeber';
    vm.getCurrentMonthAndOrganizationSelected.and.returnValue({
      previousMonthSelected: ''Septmeber';',
    });

    summaryService.onMonthSelectionChange();

    expect(updateUserSelections).toHaveBeenCalled();
  });

  it('should call confirmSave, save, and updateCurrentMonthAndOrganizationSelection when there are modifications and current month is equal to the already selected month', (done) => {
    summaryService.month = 'August';
    vm.getCurrentMonthAndOrganizationSelected.and.returnValue({
      previousMonthSelected: 'July',
    });

    summaryService.onMonthSelectionChange();

    expect(noticationService.confirmSave).toHaveBeenCalled();
    expect(save).toHaveBeenCalled();
    expect(updateCurrentMonthAndOrganizationSelection).toHaveBeenCalled();
    setTimeout(() => {
      expect(summaryService.month).toBe(updatedMonth);
      done();
    });
  });
});